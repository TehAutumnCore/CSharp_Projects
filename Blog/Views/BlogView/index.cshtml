@* @model List<Blog.Models.BlogPost> *@
@model Blog.ViewModels.BlogIndexViewModel

@{
    ViewData["Title"] = "Blog Index";
}


<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center">
        <h2>@ViewData["Title"]</h2>
        <a class="btn btn-success" asp-controller="BlogView" asp-action="Create">+Create New Post</a>
    </div>
</div>

@if (!Model.BlogPosts.Any())
{
    <div class="alert alert-info">No Blog Posts available.</div>
}
else
{
    @foreach (var post in Model.BlogPosts)
    {
        <div class="card mb-4 shadow-sm">
            <div class=" card-body">
                <h3 class="card-title">@post.Title</h3>
                <p class="card-text">@post.Description</p>
                <small class="text-muted">
                    <strong>Author:</strong>@post.Author |
                    <strong>Date:</strong>@post.Date.ToShortDateString()
                </small>
                <div class="mt-3">
                    <a class="btn btn-sm btn-outline-primary me-2" asp-controller="BlogView" asp-action="Edit"
                        asp-route-id="@post.Id"> Edit</a>
                    <a class="btn btn-sm btn-outline-danger" asp-controller="BlogView" asp-action="Delete"
                        asp-route-id="@post.Id"> Delete</a>
                </div>
            </div>
        </div>
    }
}


@* Pagination Flow
User will go to page 2,
the Controller will set:
view <- BlogPosts = posts, <-Model.BlogPosts(models)
view <- CurrentPage = pages, <- Model.CurrentPage(ViewModels)
view <- TotalPages = totalPages <- Model.TotalPages(ViewModels)

This will set each BlogPost, current page, and next page for the view.
*@

<nav>
    <ul class="pagination justify-content-center">
        @if (Model.HasPreviousPage) //shows the previous button only if youre not on page 1
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-pages="@(Model.CurrentPage - 1)">Previous</a> @*links previuos page to the current page*@
            </li>
        }

        @for (int pageNumber = 1; pageNumber <= Model.TotalPages; pageNumber++) //shows the numbered page buttons, 
        {
            <li class="page-item @(pageNumber == Model.CurrentPage ? "active" : "")"> @* highlights current page by using Bootstraps active class *@
                <a class="page-link" asp-action="Index" asp-route-pages="@pageNumber">@pageNumber</a>
            </li>
        }

        @if (Model.HasNextPage) //Shows the next button only if you're not on the last page
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-pages="@(Model.CurrentPage + 1)">Next</a> @*links the next page to the current page*@
            </li>
        }
    </ul>
</nav>